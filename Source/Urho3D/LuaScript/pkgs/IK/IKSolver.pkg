$#include "IK/IKSolver.h"

class IKSolver : public Component
{
    enum Algorithm
    {
        FABRIK
    };

    Algorithm GetAlgorithm() const;
    void SetAlgorithm(Algorithm algorithm);

    unsigned GetMaximumIterations() const;
    void SetMaximumIterations(unsigned iterations);

    float GetTolerance() const;
    void SetTolerance(float tolerance);

    bool BoneRotationsEnabled() const;
    void EnableBoneRotations(bool enable);

    bool ConstraintsEnabled() const;
    void EnableConstraints(bool enable);

    bool TargetRotationEnabled() const;
    void EnableTargetRotation(bool enable);

    bool ContinuousSolvingEnabled() const;
    void EnableContinuousSolving(bool enable);

    bool AutoUpdateInitialPoseEnabled() const;
    void EnableAutoUpdateInitialPose(bool enable);

    /// Whether or not the solver should be invoked automatically
    bool AutoSolveEnabled() const;
    void EnableAutoSolve(bool enable);

    void Solve();

    void ApplyInitialPoseToScene();
    void ApplySceneToInitialPose();
    void ApplySolvedPoseToScene();
    void ApplySceneToSolvedPose();
    void ResetSolvedPoseToInitialPose();

    virtual void ApplyConstraints(Node* tree);

    void DrawDebugGeometry(bool depthTest);

    tolua_property__get_set Algorithm algorithm;
    tolua_property__get_set unsigned maximumIterations;
    tolua_property__get_set float tolerance;
};

